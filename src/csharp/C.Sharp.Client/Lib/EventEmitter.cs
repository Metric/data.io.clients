// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

namespace Data.io.Lib
{
	public class EventEmitter
	{
		private Dictionary<string, ArrayList> listeners;

		public EventEmitter ()
		{
			listeners = new Dictionary<string, ArrayList> ();
		}
		// subscribe to an event
		public EventEmitter on(string eventName, Delegate action) {
			Listener ls = new Listener (0, action);

			if (listeners.ContainsKey (eventName)) {
				ArrayList lses = listeners [eventName];

				lses.Add (ls);
			} else {
				ArrayList lses = new ArrayList();

				lses.Add(ls);

				listeners.Add(eventName, lses);
			}

			return this;
		}

		// subscribe to an event for only one trigger count
		public EventEmitter once(string eventName, Delegate action) {
			Listener ls = new Listener (1, action);
			
			if (listeners.ContainsKey (eventName)) {
				ArrayList lses = listeners [eventName];
				
				lses.Add (ls);
			} else {
				ArrayList lses = new ArrayList();
				
				lses.Add(ls);
				
				listeners.Add(eventName, lses);
			}

			return this;
		}

		// emit the data for the specified event
		public EventEmitter emit(string eventName, params object[] args) {
			ArrayList toRemove = new ArrayList ();

			if(listeners.ContainsKey(eventName)) {
				ArrayList lses = listeners[eventName];

				foreach(Listener ls in lses) {
					if(ls.type == 1)
						toRemove.Add(ls);

					if (args == null || args.Length == 0) {
						ls.fn.DynamicInvoke ();
						continue;
					}

					int allowedArgs = ls.fn.Method.GetParameters ().Length;
					object[] realArgs = new object[allowedArgs];
					Array.Copy (args, realArgs, allowedArgs);
					ls.fn.DynamicInvoke (realArgs);

				}

				foreach(Listener ls in toRemove) {
					lses.Remove(ls);
				}
			}

			return this;
		}
	}
}

