// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using WebSocketSharp;
using SimpleJson;

namespace Data.io.Lib
{
	public class Socket
	{
		private WebSocket ws;
		private EventEmitter emitter;
		public bool isConnected { get; set; }

		public Socket() {
			emitter = new EventEmitter ();
		}

		//Init with the specified websocket
		public Socket (WebSocket ws) : this()
		{
			this.ws = ws;

			this.ws.OnClose += this.onClose;
			this.ws.OnError += this.onError;

			this.ws.OnMessage += this.onMessage;

			this.ws.OnOpen += this.onOpen;
		}

		// emits the close event when the socket closes
		protected void onClose (object sender, CloseEventArgs e) {
			this.isConnected = false;
			emitter.emit ("close");
		}

		// emits the error event
		// ErrorEventArgs is the only argument in the array
		protected void onError (object sender, ErrorEventArgs e) {
			this.isConnected = false;
			emitter.emit ("error", e);
		}

		// emits the connect event when socket successfully connects
		protected void onOpen (object sender, EventArgs e) {
			this.isConnected = true;
			emitter.emit ("connect");
		}

		//handles the incoming data
		protected void onMessage (object sender, MessageEventArgs e)  {
			string data = e.Data;

			//Console.WriteLine(data);
			try {
				JsonObject obj = (JsonObject)SimpleJson.SimpleJson.DeserializeObject(data);
				if(obj != null) {
					JsonArray arr = (JsonArray)obj["data"];
					//Debug.Log(arr.ToString());
					//emit the data through the eventemitter
					emitter.emit ((string)obj["name"], arr.ToArray());
				}
			}
			catch (Exception ex) {
				//Debug.Log (ex.Message);
			}
		}

		// subscribe to an event from the server with the callback
		public Socket on(string eventName, Delegate action) {
			emitter.on (eventName, action);

			return this;
		}

		// subscribe only for one event trigger count
		public Socket once(string eventName, Delegate action) {
			emitter.once (eventName, action);

			return this;
		}

		// emit the data for the event to the server
		public Socket emit(string eventName, params object[] args) {
			Packet p = new Packet (eventName, args);

			if (this.ws != null) {
				this.ws.Send(p.toJson());
			}

			return this;
		}

		// close the socket
		public Socket close() {
			if (this.ws != null) {
				this.ws.Close();
			}

			return this;
		}

		// connect to the already specified uri
		// Only call this after all events have subscribed
		public Socket connect() {
			if (this.ws != null) {
				this.ws.Connect();
			}

			return this;
		}
	}
}
