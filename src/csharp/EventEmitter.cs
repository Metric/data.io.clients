// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Data.io
{
	public class EventEmitter
	{
		private Dictionary<string, ArrayList> listeners;

		public EventEmitter ()
		{
			listeners = new Dictionary<string, ArrayList> ();
		}
		// subscribe to an event
		public EventEmitter On(string eventName, Delegate action) {
			Listener ls = new Listener (0, action);

			if (listeners.ContainsKey (eventName)) {
				ArrayList lses = listeners [eventName];

				lses.Add (ls);
			} else {
				ArrayList lses = new ArrayList();

				lses.Add(ls);

				listeners.Add(eventName, lses);
			}

			return this;
		}

		// subscribe to an event for only one trigger count
		public EventEmitter Once(string eventName, Delegate action) {
			Listener ls = new Listener (1, action);
			
			if (listeners.ContainsKey (eventName)) {
				ArrayList lses = listeners [eventName];
				
				lses.Add (ls);
			} else {
				ArrayList lses = new ArrayList();
				
				lses.Add(ls);
				
				listeners.Add(eventName, lses);
			}

			return this;
		}

		// emit the data for the specified event
		public EventEmitter Emit(string eventName, params object[] args) {
			ArrayList toRemove = new ArrayList ();

			if(listeners.ContainsKey(eventName)) {
				ArrayList lses = listeners[eventName];

				foreach(Listener ls in lses) {
					if(ls.type == 1)
						toRemove.Add(ls);

					if (args == null || args.Length == 0) {
						ls.fn.DynamicInvoke ();
						continue;
					}

                    System.Reflection.ParameterInfo[] parameters = ls.fn.Method.GetParameters ();

                    //if args are less than the paramaters length
                    //then ignore this one and continue;
                    //args have to be equal or greater than the parameters length
                    if(args.Length < parameters.Length)
                    {
                        continue;
                    }

                    object[] realArgs = new object[parameters.Length];

                    int i = 0;
                    foreach(System.Reflection.ParameterInfo info in parameters)
                    {
                        if(args[i] == null)
                        {
                            realArgs[i] = null;
                        }
                        else if (info.ParameterType.Equals(typeof(double))) {
                            realArgs[i] = Convert.ToDouble(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(float)))
                        {
                            realArgs[i] = Convert.ToSingle(args[i]);
                        }
                        //if a string, bool, long, json object, or json array just add it
                        //as casting will work properly when using DynamicInvoke
                        else if(info.ParameterType.Equals(typeof(long)))
                        {
                            realArgs[i] = Convert.ToInt64(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(bool)))
                        {
                            realArgs[i] = Convert.ToBoolean(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(ulong)))
                        {
                            realArgs[i] = Convert.ToUInt64(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(string)))
                        {
                            realArgs[i] = args[i].ToString();
                        }
                        else if(info.ParameterType.Equals(typeof(byte)))
                        {
                            realArgs[i] = Convert.ToByte(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(short)))
                        {
                            realArgs[i] = Convert.ToInt16(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(ushort)))
                        {
                            realArgs[i] = Convert.ToUInt16(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(sbyte)))
                        {
                            realArgs[i] = Convert.ToSByte(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(char)))
                        {
                            realArgs[i] = Convert.ToChar(args[i]);
                        }
                        else if(info.ParameterType.Equals(typeof(DateTime)))
                        {
                            realArgs[i] = Convert.ToDateTime(args[i].ToString());
                        }
                        else if(info.ParameterType.Equals(typeof(decimal)))
                        {
                            realArgs[i] = Convert.ToDecimal(args[i]);
                        }
                        else
                        {
                            realArgs[i] = args[i];
                        }
                        i++;
                    }
					ls.fn.DynamicInvoke (realArgs);
				}

				foreach(Listener ls in toRemove) {
					lses.Remove(ls);
				}
			}

			return this;
		}
	}
}

