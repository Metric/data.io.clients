// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using SimpleJson;
using UnityEngine;
using WebSocketSharp;

namespace Data.io
{
	public class IOSocket
	{
		private WebSocket ws;
		private EventEmitter emitter;

        protected string uri;

		public bool IsConnected { get; set; }

		public IOSocket(string uri) {
            ParseUri(uri);
            ws = new WebSocket(this.uri);

            ws.OnClose += Ws_OnClose;
            ws.OnError += Ws_OnError;
            ws.OnMessage += Ws_OnMessage;
            ws.OnOpen += Ws_OnOpen;

			emitter = new EventEmitter ();
		}

        protected void ParseUri(string uri)
        {
            if (!uri.Contains("ws://") && !uri.Contains("wss://"))
            {
                if (uri.Contains("http://"))
                {
                    uri = uri.Replace("http://", "ws://");
                }
                else if (uri.Contains("https://"))
                {
                    uri = uri.Replace("https://", "wss://");
                }
                else
                {
                    int index = uri.IndexOf(':');

                    if (index > -1)
                    {
                        uri = "ws" + uri.Substring(index);
                    }
                    else
                    {
                        uri = "ws://" + uri;
                    }
                }
            }

            this.uri = uri;
        }

        private void Ws_OnOpen(object sender, EventArgs e)
        {
            OnOpen();
        }

        private void Ws_OnMessage(object sender, MessageEventArgs e)
        {
            OnMessage(e.Data);
        }

        private void Ws_OnError(object sender, ErrorEventArgs e)
        {
            OnError(e.Exception);
        }

        private void Ws_OnClose(object sender, CloseEventArgs e)
        {
            if (e.WasClean == false)
            {
                OnError(new Exception("Connection failure"));
            }
            else
            {
                OnClose();
            }
        }

        // emits the close event when the socket closes
        protected void OnClose () {
			IsConnected = false;
			emitter.Emit ("close");
		}

		// emits the error event
		// ErrorEventArgs is the only argument in the array
		protected void OnError (Exception e) {
			IsConnected = false;
			emitter.Emit ("error", e);
		}

		// emits the connect event when socket successfully connects
		protected void OnOpen () {
			IsConnected = true;
			emitter.Emit ("connect");
		}

		//handles the incoming data
		protected void OnMessage (string data)  {
			//Console.WriteLine(data);
			try {
				JsonObject obj = (JsonObject)SimpleJson.SimpleJson.DeserializeObject(data);
				if(obj != null) {
					JsonArray arr = (JsonArray)obj["data"];
					//Debug.Log(arr.ToString());
					//emit the data through the eventemitter
					emitter.Emit ((string)obj["name"], arr.ToArray());
				}
			}
			catch (Exception ex) {
				Debug.LogError (ex);
			}
		}

		// subscribe to an event from the server with the callback
		public IOSocket On(string eventName, Delegate action) {
			emitter.On (eventName, action);

			return this;
		}

		// subscribe only for one event trigger count
		public IOSocket Once(string eventName, Delegate action) {
			emitter.Once (eventName, action);

			return this;
		}

		// emit the data for the event to the server
		public IOSocket Emit(string eventName, params object[] args) {
			Packet p = new Packet (eventName, args);

			if (this.ws != null) {
                ws.SendAsync(p.toJson(), (bool done) =>
                {

                });
			}

			return this;
		}

		// close the socket
		public IOSocket Close() {
			if (this.ws != null) {
                ws.CloseAsync();
			}

			return this;
		}

		// connect to the already specified uri
		// Only call this after all events have subscribed
		public IOSocket Connect() {
			if (this.ws != null) {
                ws.ConnectAsync();
			}

			return this;
		}
	}
}
